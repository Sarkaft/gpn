from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO, bgzf
import gzip
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import re
from tqdm import tqdm
tqdm.pandas(desc="my bar!")

import matplotlib
matplotlib.use('pdf')


tracks = pd.read_csv("tracks.tsv", sep="\t", index_col=0)
tracks = tracks[~tracks.index.str.startswith("DGF")]
print(tracks)

REGION_SIZE = 200
FLANK_SIZE = 400
TOTAL_SIZE = REGION_SIZE + 2 * FLANK_SIZE

splits = ["train", "val", "test"]


rule all:
    input:
        expand("datasets/{split}.parquet", split=splits),
        "plots/positive_proportion.pdf",
        "plots/n_tracks_per_feature_type.pdf",


rule download_track:
    output:
        "peaks/{track_name}.bed",
    params:
        track_url = lambda wildcards: tracks.loc[wildcards["track_name"]].track_url
    shell:
        "wget {params.track_url} -O {output}"


rule plot_track_stats:
    input:
        expand("peaks/{track_name}.bed", track_name=tracks.index),
    output:
        "plots/n_tracks_per_feature_type.pdf",
        "plots/n_peaks_per_track.pdf",
        "plots/peak_width.pdf",
    run:
        df1s = []
        df2s = []
        for i, track_name in enumerate(tracks.index):
            if i % 10 == 0: print(i)
            df = pd.read_csv(input[i], sep="\t", header=None, usecols=[0, 1, 2])
            df["peak_width"] = df[2] - df[1]
            df["track_name"] = track_name
            df = df[["track_name", "peak_width"]]
            df1s.append(df)
            df2s.append(df.groupby("track_name").size().to_frame("n_peaks").reset_index())
        df1 = pd.concat(df1s, ignore_index=True)
        df2 = pd.concat(df2s, ignore_index=True)
        for df in [df1, df2]:
            df["feature_type"] = df.track_name.str.split("_").str[0]
            df.feature_type.replace({
                "DHS": "DNase I hypersensitive site",
                "DGF": "DNase I digital genomic footprinting",
                "HM": "Histone modification",
                "TFBS": "TF binding site",
               }, inplace=True)
        print(df1)
        print(df2)

        sns.countplot(data=df2, y="feature_type")
        plt.savefig(output[0], bbox_inches='tight')
        plt.close()

        g = sns.catplot(data=df2, row="feature_type", y="n_peaks", kind="box", height=3, sharex=False, sharey=False, showfliers=False)
        g.set_titles(col_template="{col_name}", row_template="{row_name}")
        plt.savefig(output[1], bbox_inches='tight')
        plt.close()

        g = sns.catplot(data=df1, row="feature_type", y="peak_width", kind="box", height=3, sharex=False, sharey=False, showfliers=False)
        g.set_titles(col_template="{col_name}", row_template="{row_name}")
        plt.savefig(output[2], bbox_inches='tight')
        plt.close()


rule process_peaks:
    input:
        "peaks/{track_name}.bed",
        "chrom.sizes",
    output:
        "processed_peaks/{track_name}.bed",
    run:
        bed = pd.read_csv(input[0], sep="\t", header=None, usecols=[0, 1, 2]).rename(columns={0: "chromosome", 1: "start", 2: "end"})
        chrom_sizes = pd.read_csv(input[1], sep="\t", header=None, index_col=0)
        bed = bed[bed.chromosome.isin(chrom_sizes.index.values)]
        bed["track_name"] = wildcards["track_name"]
        bed.to_csv(output[0], sep="\t", header=False, index=False)


rule merge_tracks:
    input:
        expand("processed_peaks/{track_name}.bed", track_name=tracks.index),
    output:
        "processed_peaks/all.bed",
    shell:
        "cat {input} | bedtools sort -i stdin > {output}"


rule make_windows:
    input:
        "chrom.sizes"
    output:
        "windows.bed"
    shell:
        "bedtools makewindows -g {input} -w {REGION_SIZE} > {output}"


rule bedtools_intersect_and_slop:
    input:
        "windows.bed",
        "processed_peaks/all.bed",
        "chrom.sizes",
    output:
        "intersection.bed",
    shell:
        """bedtools map -a {input[0]} -b {input[1]} -f 0.5 -o distinct -c 4 | bedtools slop -i stdin -g {input[2]} -b {FLANK_SIZE} | awk '$3-$2 == {TOTAL_SIZE}' > {output}"""


rule download_reference:
    output:
        "tair10.raw.fa",
    shell:
        "wget https://www.arabidopsis.org/download_files/Genes/TAIR10_genome_release/TAIR10_chromosome_files/TAIR10_chr_all.fas -O {output}"


rule clean_reference:
    input:
        "tair10.raw.fa",
    output:
        "tair10.fa",
    run:
        records = []
        with open(input[0]) as input_handle:
            for record in SeqIO.parse(input_handle, "fasta"):
                print(record.id)
                if record.id in ["M", "chloroplast"]: continue
                record.id = "Chr" + record.id
                print(record.id)
                records.append(record)

        with open(output[0], "w") as output_handle:
            SeqIO.write(records, output_handle, "fasta")


rule add_seq:
    input:
        "intersection.bed",
        "tair10.fa",
    output:
        "intersection.seq.bed",
    shell:
        "bedtools getfasta -fi {input[1]} -bed {input[0]} -tab -bedOut > {output}"


rule make_dataset:
    input:
        "intersection.seq.bed",
    output:
        expand("datasets/{split}.parquet", split=splits),
    run:
        track_list = tracks.index.values.tolist()

        regions = pd.read_csv(input[0], sep="\t", header=None, names=["chromosome", "start", "end", "features", "seq"])
        print(regions.shape)
        regions = regions[~(regions.seq.str.contains("[^ACTG]"))]
        print(regions.shape)
        regions = regions.sample(frac=1, random_state=42)
        regions["strand"] = "+"
        regions = regions[["chromosome", "start", "end", "strand", "seq", "features"]]
        regions.loc[:, track_list] = np.uint8(0)
        regions.features = regions.features.apply(lambda x: x.split(','))
        for index, row in tqdm(regions.iterrows(), total=regions.shape[0]):
            if not '.' in row.features:  # this means not empty
                regions.loc[index, row.features] = np.uint8(1)
        regions.drop(columns="features", inplace=True)
        print(regions)

        regions_rc = regions.copy()
        regions_rc["strand"] = "-"
        regions_rc["seq"] = regions_rc.seq.apply(lambda x: str(Seq(x).reverse_complement()))

        regions = pd.concat([regions, regions_rc], ignore_index=True)
        print(regions)
        print(regions.columns)

        for i, split in enumerate(splits):
            if split == "train":
                mask = (regions.chromosome.isin(["Chr1", "Chr2", "Chr3"]) | ((regions.chromosome=="Chr4") & (regions.start < 12000000)))
            elif split == "val":
                mask = ((regions.chromosome=="Chr4") & (regions.start >= 12000000))
            elif split == "test":
                mask = (regions.chromosome=="Chr5")
            print(split, mask.mean())
            regions[mask].to_parquet(output[i], index=False)


rule plot_class_balance:
    input:
        "datasets/test.parquet",
    output:
        "plots/positive_proportion.pdf",
        "plots/log10_positive_proportion.pdf",
    run:
        d = pd.read_parquet(input[0])
        features = [col for col in d.columns.values if col not in ["chromosome", "start", "end", "strand", "seq"]]
        p = d[features].mean().to_frame("positive_proportion")
        print(p)
        p["feature_type"] = p.index.str.split("_").str[0]
        p.feature_type.replace({
            "DHS": "DNase I hypersensitive site",
            "DGF": "DNase I digital genomic footprinting",
            "HM": "Histone modification",
            "TFBS": "TF binding site",
        }, inplace=True)
        print(p)
        p["log10_positive_proportion"] = p.positive_proportion.apply(np.log10)
        print(p)

        g = sns.catplot(data=p, row="feature_type", y="positive_proportion", kind="box", height=3, sharex=False, sharey=False, showfliers=False)
        g.set_titles(col_template="{col_name}", row_template="{row_name}")
        plt.savefig(output[0], bbox_inches='tight')
        plt.close()

        g = sns.catplot(data=p, row="feature_type", y="log10_positive_proportion", kind="box", height=3, sharex=False, sharey=False, showfliers=False)
        g.set_titles(col_template="{col_name}", row_template="{row_name}")
        plt.savefig(output[1], bbox_inches='tight')
